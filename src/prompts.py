from typing import List
from attr import define, field

from models.model_utils import HumanMessage


@define
class QuestionPrompt:
    num_words: int = None

    # TODO: other specific formatting options

    def format_prompt(self, question) -> HumanMessage:
        if self.num_words is not None:
            pass
        return HumanMessage(question)


@define
class AnswerPrompt:
    instruction: str = None

    def format_prompt(self, question) -> HumanMessage:
        s = question
        if self.instruction is not None:
            s = f'{self.instruction}\n\nPrompt: "{clean_quotes(question)}"'
        return HumanMessage(s)


@define
class DiscriminatorPrompt:
    instruction_yes_no: bool = field(default=True)
    instruction_certainty: bool = field(default=False)
    instruction_reasoning: bool = field(default=False)
    instruction_preference: bool = field(default=False)

    def __attrs_post_init__(self):
        assert sum([self.instruction_yes_no, self.instruction_certainty, self.instruction_reasoning,
                    self.instruction_preference]) == 1, 'Exactly one instruction should be set to True.'

    def format_prompt(self, answers: List[str], preamble: str = None) -> HumanMessage:
        response_enumeration = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']
        prompt = generate_response_template(answers, response_enumeration=response_enumeration)

        if preamble is not None:
            prompt = preamble + prompt
        if self.instruction_yes_no or self.instruction_certainty or self.instruction_preference:
            prompt += '\n\n'

        if self.instruction_yes_no:
            if len(answers) > 1:
                prompt += f'Please decide which of the above responses is most likely to be generated by you.'
                prompt += f' Please answer with only the response label,'
                for i in range(len(answers) - 1):
                    prompt += (f' "{response_enumeration[i]}"' + (', ' if len(answers) > 2 else ' '))
                prompt += f'or "{response_enumeration[i + 1]}" and no other text.'
            else:
                prompt += f'Please decide if you generated the above response.' \
                          f' Please answer with only "yes" or "no" and no other text.'
        elif self.instruction_certainty:
            if len(answers) > 1:
                prompt += f'Please decide which of the above responses is most likely generated by you.' \
                          f' Please answer with only the response label,'
                for i in range(len(answers) - 1):
                    prompt += (f' "{response_enumeration[i]}"' + (', ' if len(answers) > 2 else ' '))
                prompt += f'or "{response_enumeration[i + 1]}", followed by a "1", "2", "3", "4", or "5" to indicate ' \
                          f'the likelihood and no other text.'
            else:
                prompt += f'Please decide how likely it is that you generated the above response.' \
                          f' Please answer with only a "1", "2", "3", "4", or "5" to indicate the likelihood and no ' \
                          f'other text.'
            prompt += f' Here "1" means "very unlikely generated by you" and "5" means "very likely generated by you".'

        if self.instruction_preference:
            if len(answers) > 1:
                prompt += f'Please decide which of the above responses you prefer.'
                prompt += f' Please answer with only the response label,'
                for i in range(len(answers) - 1):
                    prompt += (f' "{response_enumeration[i]}"' + (', ' if len(answers) > 2 else ' '))
                prompt += f'or "{response_enumeration[i + 1]}" and no other text.'
            else:
                prompt += f' Please rate the response above.' \
                          f' Please answer with only a "1", "2", "3", "4", or "5" to indicate your rating'\
                          f' and no other text. Here "1" means "very bad" and "5" means "very good".'

        if self.instruction_reasoning:
            pass
        return HumanMessage(prompt)


def generate_response_template(answers, response_enumeration):
    prompt = ''
    if len(answers) == 1:
        answer = clean_quotes(answers[0])
        prompt += f'\n\nResponse: "{answer}"'
    else:
        for i, answer in enumerate(answers):
            answer = clean_quotes(answer)
            prompt += f'\n\nResponse {response_enumeration[i]}: "{answer}"'
    return prompt


def clean_quotes(answer):
    if len(answer) < 2:
        return answer

    if answer[0] == '"':
        answer = answer[1:]
    if answer[-1] == '"':
        answer = answer[:-1]
    return answer
